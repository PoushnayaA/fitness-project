(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initActiveCard = void 0;
var cards = document.querySelectorAll('[data-price-card="price-card"]');
var cardsList = document.querySelectorAll('[data-price-card="price-pagination"]');
var cardsArray = Array.from(cards);
var cardsListArray = Array.from(cardsList);
var changeActiveCard = function changeActiveCard(card) {
  if (cards) {
    cards.forEach(function (element) {
      if (element.classList.contains('price__card--active')) {
        element.classList.remove('price__card--active');
        element.querySelector('button').classList.remove('button--main');
      }
    });
    cardsArray[card].classList.add('price__card--active');
    cardsArray[card].querySelector('button').classList.add('button--main');
  }
};
var initActiveCard = exports.initActiveCard = function initActiveCard() {
  cardsListArray.forEach(function (list) {
    list.addEventListener('click', function () {
      for (var i = 1; i < cardsArray.length; i++) {
        cardsArray[i].classList.add('price__card--active');
        i++;
        i++;
      }
    });
  });
  cardsArray.forEach(function (element) {
    element.addEventListener('click', function () {
      changeActiveCard(cardsArray.indexOf(element));
    });
  });
};

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initScroll = void 0;
var links = document.querySelectorAll('a[href^="#"]');
var initScroll = exports.initScroll = function initScroll() {
  console.log("1");
  console.log("1");
  links.forEach(function (anchor) {
    anchor.addEventListener('click', function (e) {
      e.preventDefault();
      document.querySelector(anchor.getAttribute('href')).scrollIntoView({
        behavior: 'smooth'
      });
    });
  });
};

},{}],3:[function(require,module,exports){
"use strict";

var _iosVhFix = require("./utils/ios-vh-fix");
var _scroll = require("./extra-options/scroll");
var _activeCard = require("./extra-options/active-card");
var _initVideo = require("./modules/video/init-video");
var _initTabs = require("./modules/tabs/init-tabs");
var _initSliderJury = require("./modules/sliders/init-slider-jury");
// import {Form} from './modules/form-validate/form';
// ---------------------------------
window.addEventListener('DOMContentLoaded', function () {
  // Utils
  // ---------------------------------

  (0, _iosVhFix.iosVhFix)();

  // Modules
  // ---------------------------------

  // все скрипты должны быть в обработчике 'DOMContentLoaded', но не все в 'load'
  // в load следует добавить скрипты, не участвующие в работе первого экрана
  window.addEventListener('load', function () {
    (0, _scroll.initScroll)();
    (0, _initVideo.initYoutubeVideo)();
    (0, _initTabs.initTabs)();
    (0, _activeCard.initActiveCard)();
    (0, _initSliderJury.initSliderJury)();
    // const form = new Form();
    // window.form = form;
    // form.init();
  });
});

// ---------------------------------

// ❗❗❗ обязательно установите плагины eslint, stylelint, editorconfig в редактор кода.

// привязывайте js не на классы, а на дата атрибуты (data-validate)

// вместо модификаторов .block--active используем утилитарные классы
// .is-active || .is-open || .is-invalid и прочие (обязателен нейминг в два слова)
// .select.select--opened ❌ ---> [data-select].is-open ✅

// выносим все в дата атрибуты
// url до иконок пинов карты, настройки автопрокрутки слайдера, url к json и т.д.

// для адаптивного JS используется matchMedia и addListener
// const breakpoint = window.matchMedia(`(min-width:1024px)`);
// const breakpointChecker = () => {
//   if (breakpoint.matches) {
//   } else {
//   }
// };
// breakpoint.addListener(breakpointChecker);
// breakpointChecker();

// используйте .closest(el)

},{"./extra-options/active-card":1,"./extra-options/scroll":2,"./modules/sliders/init-slider-jury":4,"./modules/tabs/init-tabs":5,"./modules/video/init-video":7,"./utils/ios-vh-fix":9}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initSliderJury = void 0;
var sliderJury = document.querySelector('.jury__swiper');
var buttonNext = document.querySelector('.jury__button--next');
var buttonPrev = document.querySelector('.jury__button--prev');
var initSliderJury = exports.initSliderJury = function initSliderJury() {
  if (sliderJury) {
    // eslint-disable-next-line
    new Swiper(sliderJury, {
      navigation: {
        nextEl: buttonNext,
        prevEl: buttonPrev
      },
      loop: true,
      breakpoints: {
        1366: {
          slidesPerView: 4,
          spaceBetween: 40
        },
        768: {
          slidesPerView: 2,
          spaceBetween: 32
        },
        320: {
          slidesPerView: 1,
          spaceBetween: 20
        }
      }
    });
  }
};

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tabs = exports.initTabs = void 0;
var _tabs = require("./tabs");
var tabs;
var initTabs = exports.initTabs = function initTabs() {
  exports.tabs = tabs = new _tabs.Tabs();
  // Используйте в разработке экспортируемую переменную tabs, window сделан для бэкэнда
  window.tabs = tabs;
};

},{"./tabs":6}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tabs = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var Tabs = exports.Tabs = /*#__PURE__*/function () {
  function Tabs() {
    _classCallCheck(this, Tabs);
    this._documentClickHandler = this._documentClickHandler.bind(this);
    this._init();
  }
  _createClass(Tabs, [{
    key: "_init",
    value: function _init() {
      this._initAllTabs();
      document.addEventListener('click', this._documentClickHandler);
    }
  }, {
    key: "_resizeObserver",
    value: function _resizeObserver() {
      var _this = this;
      return new ResizeObserver(function (entries) {
        var _iterator = _createForOfIteratorHelper(entries),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var entry = _step.value;
            if (entry.target.classList.contains('is-active')) {
              _this._updateTabHeight();
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      });
    }
  }, {
    key: "_documentClickHandler",
    value: function _documentClickHandler(evt) {
      var target = evt.target;
      if (!target.closest('[data-tabs="control"]')) {
        return;
      }
      evt.preventDefault();
      evt.stopPropagation();
      var control = target.closest('[data-tabs="control"]');
      this.openTab(control);
    }
  }, {
    key: "_initAllTabs",
    value: function _initAllTabs() {
      var _this2 = this;
      var tabs = document.querySelectorAll('[data-tabs="parent"]');
      var forLoadTabs = document.querySelectorAll('[data-tabs="element"].for-load');
      tabs.forEach(function (tab) {
        _this2._initTab(tab);
      });
      forLoadTabs.forEach(function (tab) {
        tab.classList.remove('for-load');
      });
    }
  }, {
    key: "_removeAllActiveClasses",
    value: function _removeAllActiveClasses(tabControlElements, tabElements) {
      tabElements.forEach(function (tab) {
        tab.classList.remove('is-active');
      });
      tabControlElements.forEach(function (element, index) {
        element.classList.remove('is-active');
        element.setAttribute('data-index', index);
      });
    }
  }, {
    key: "_setTabStartState",
    value: function _setTabStartState(tab, dataHeight, tabElements, tabContentElement, tabControlElements, dataDelay) {
      var activeIndex = this._returnActiveIndex(tabControlElements);
      var blockHeight = dataHeight === 'max' ? this._returnMaxHeight(tabElements) : tabElements[activeIndex].offsetHeight;
      this._removeAllActiveClasses(tabControlElements, tabElements);
      tab.classList.add('no-transition');
      tabControlElements[activeIndex].classList.add('is-active');
      tabElements[activeIndex].classList.add('is-active');
      if (dataHeight !== 'unset') {
        tabContentElement.style.height = "".concat(blockHeight, "px");
      }
      setTimeout(function () {
        if (dataDelay) {
          tab.classList.remove('no-transition');
        }
      }, dataDelay);
    }
  }, {
    key: "_returnActiveIndex",
    value: function _returnActiveIndex(tabControlElements) {
      var activeIndex = 0;
      var flag = true;
      tabControlElements.forEach(function (control, index) {
        if (control.classList.contains('is-active') && flag) {
          activeIndex = index;
          flag = false;
        }
      });
      return activeIndex;
    }
  }, {
    key: "_returnMaxHeight",
    value: function _returnMaxHeight(tabElements) {
      var height = [];
      tabElements.forEach(function (element) {
        height.push(element.offsetHeight);
      });
      height.sort(function (a, b) {
        return a - b;
      });
      return height[height.length - 1];
    }
  }, {
    key: "_returnScopeList",
    value: function _returnScopeList(nodeList, parent) {
      var array = [];
      nodeList.forEach(function (element) {
        var elementParent = element.closest('[data-tabs="parent"]');
        if (elementParent === parent) {
          array.push(element);
        }
      });
      return array;
    }
  }, {
    key: "_returnScopeChild",
    value: function _returnScopeChild(nodeList, parent) {
      var currentChild;
      nodeList.forEach(function (element) {
        var elementParent = element.closest('[data-tabs="parent"]');
        if (elementParent === parent) {
          currentChild = element;
        }
      });
      return currentChild;
    }
  }, {
    key: "_updateTabHeight",
    value: function _updateTabHeight() {
      var _this3 = this;
      var activeElements = document.querySelectorAll('[data-tabs="element"].is-active');
      activeElements.forEach(function (element) {
        var transition = false;
        var parent = element.closest('[data-tabs="parent"]');
        if (parent.closest('[data-tabs="element"]')) {
          transition = true;
        }
        _this3._setTabElementHeight(element, transition);
      });
    }
  }, {
    key: "_setTabElementHeight",
    value: function _setTabElementHeight(element, transition) {
      var parentElement = element.closest('[data-tabs="parent"]');
      var dataHeight = parentElement.dataset.height;
      var contentElement = this._returnScopeChild(parentElement.querySelectorAll('[data-tabs="content"]'), parentElement);
      var tabElements = this._returnScopeList(parentElement.querySelectorAll('[data-tabs="element"]'), parentElement);
      if (!transition) {
        parentElement.classList.add('no-transition');
      }
      if (dataHeight === 'max') {
        contentElement.style.height = "".concat(this._returnMaxHeight(tabElements), "px");
      } else if (dataHeight === 'unset') {
        contentElement.style.height = null;
      } else {
        contentElement.style.height = "".concat(this._returnScopeChild(parentElement.querySelectorAll('[data-tabs="element"].is-active'), parentElement).offsetHeight, "px");
      }
      setTimeout(function () {
        return parentElement.classList.remove('no-transition');
      });
    }
  }, {
    key: "_createDOMElement",
    value: function _createDOMElement(elementType, attributes) {
      var element = document.createElement(elementType);
      for (var key in attributes) {
        if (attributes.hasOwnProperty(key)) {
          element.setAttribute(key, attributes[key]);
        }
      }
      return element;
    }
  }, {
    key: "_toggleAndRemoveClass",
    value: function _toggleAndRemoveClass(element, accordion, control) {
      accordion.classList.toggle('is-active', element.classList.contains('is-active'));
      element.classList.remove('is-active');
      control.classList.remove('is-active');
    }
  }, {
    key: "_setAccordionState",
    value: function _setAccordionState(parent, elements, controls) {
      var _this4 = this;
      if (parent.hasAttribute('data-accordion-init')) {
        return;
      }
      parent.setAttribute('data-accordion-init', '');
      elements.forEach(function (element, idx) {
        var accordion = _this4._createDOMElement('div', {
          'data-tabs': 'accordion'
        });
        var accordionWrapper = _this4._createDOMElement('div', {
          'data-tabs': 'accordion-wrapper'
        });
        var accordionContent = _this4._createDOMElement('div', {
          'data-tabs': 'accordion-content'
        });
        accordion.append(controls[idx], accordionWrapper);
        accordionWrapper.append(accordionContent);
        accordionContent.append(element);
        parent.append(accordion);
        _this4._toggleAndRemoveClass(element, accordion, controls[idx]);
      });
    }
  }, {
    key: "_removeAccordionState",
    value: function _removeAccordionState(parent, elements, controls) {
      var _this5 = this;
      if (!parent.hasAttribute('data-accordion-init')) {
        return;
      }
      parent.removeAttribute('data-accordion-init');
      var controlList = this._returnScopeChild(parent.querySelectorAll('[data-tabs="controls"]'), parent);
      var content = this._returnScopeChild(parent.querySelectorAll('[data-tabs="content"]'), parent);
      var activeAccordions = this._returnScopeList(parent.querySelectorAll('[data-tabs="accordion"].is-active'), parent);
      var activeControl = activeAccordions.length ? activeAccordions[0].querySelector('[data-tabs="control"]') : controls[0];
      var activeElement = activeAccordions.length ? activeAccordions[0].querySelector('[data-tabs="element"]') : elements[0];
      elements.forEach(function (element, idx) {
        var accordion = element.closest('[data-tabs="accordion"]');
        if (!accordion) {
          return;
        }
        controlList.append(controls[idx]);
        content.append(element);
        _this5._toggleAndRemoveClass(element, accordion, controls[idx]);
        accordion.remove();
      });
      activeControl.classList.add('is-active');
      activeElement.classList.add('is-active');
    }
  }, {
    key: "accordionBreakpointChecker",
    value: function accordionBreakpointChecker(media, parent, elements, controls) {
      if (media.matches) {
        this._setAccordionState(parent, elements, controls);
      } else {
        this._removeAccordionState(parent, elements, controls);
      }
    }
  }, {
    key: "_initTab",
    value: function _initTab(tab) {
      var _this6 = this;
      var dataHeight = tab.dataset.height;
      var dataDelay = tab.dataset.delay ? tab.dataset.delay : 0;
      var tabContentElement = tab.querySelector('[data-tabs="content"]');
      var tabControlElements = this._returnScopeList(tab.querySelectorAll('[data-tabs="control"]'), tab);
      var tabElements = this._returnScopeList(tab.querySelectorAll('[data-tabs="element"]'), tab);
      var accordionMedia = tab.getAttribute('data-accordion-media') ? window.matchMedia(tab.getAttribute('data-accordion-media')) : null;
      this._setTabStartState(tab, dataHeight, tabElements, tabContentElement, tabControlElements, dataDelay);
      if (accordionMedia && !tab.accordionListener) {
        this.accordionBreakpointChecker(accordionMedia, tab, tabElements, tabControlElements);
        accordionMedia.addEventListener('change', this.accordionBreakpointChecker.bind(this, accordionMedia, tab, tabElements, tabControlElements));
        tab.accordionListener = true;
      }
      if (dataHeight !== 'unset') {
        tabElements.forEach(function (element) {
          _this6._resizeObserver().observe(element);
        });
      }
      setTimeout(function () {
        tab.classList.remove('no-transition-global');
      });
    }
  }, {
    key: "reInit",
    value: function reInit() {
      this._initAllTabs();
    }
  }, {
    key: "toggleAccordion",
    value: function toggleAccordion(accordion) {
      if (accordion.classList.contains('is-active')) {
        this.closeAccordion(accordion);
      } else {
        this.openAccordion(accordion);
      }
    }
  }, {
    key: "openAccordion",
    value: function openAccordion(accordion) {
      var parentElement = accordion.closest('[data-accordion-init]');
      var accordionWrapper = accordion.querySelector('[data-tabs="accordion-wrapper"]');
      accordionWrapper.style.maxHeight = "".concat(accordionWrapper.offsetHeight, "px");
      if (parentElement.hasAttribute('data-single')) {
        this.closeAllAccordion(parentElement);
      }
      accordion.classList.add('is-active');
      setTimeout(function () {
        accordionWrapper.style.maxHeight = "".concat(accordionWrapper.scrollHeight, "px");
        accordionWrapper.addEventListener('transitionend', function () {
          accordionWrapper.style.maxHeight = null;
        }, {
          once: true
        });
      }, 0);
    }
  }, {
    key: "closeAllAccordion",
    value: function closeAllAccordion(parent) {
      var _this7 = this;
      var elements = parent.querySelectorAll('[data-tabs="accordion"]');
      elements.forEach(function (element) {
        var currentParent = element.closest('[data-accordion-init]');
        if (currentParent === parent && element.classList.contains('is-active')) {
          _this7.closeAccordion(element);
        }
      });
    }
  }, {
    key: "closeAccordion",
    value: function closeAccordion(accordion) {
      var accordionWrapper = accordion.querySelector('[data-tabs="accordion-wrapper"]');
      accordion.classList.remove('is-active');
      accordionWrapper.style.transition = 'none';
      accordionWrapper.style.maxHeight = "".concat(accordionWrapper.scrollHeight, "px");
      setTimeout(function () {
        accordionWrapper.style.transition = null;
        accordionWrapper.style.maxHeight = '0px';
        accordionWrapper.addEventListener('transitionend', function () {
          accordionWrapper.style.maxHeight = null;
        }, {
          once: true
        });
      }, 0);
    }
  }, {
    key: "openTab",
    value: function openTab(control) {
      var currentIndex = control.dataset.index;
      var parentElement = control.closest('[data-tabs="parent"]');
      var accordion = control.closest('[data-tabs="accordion"]');
      if (accordion && accordion.closest('[data-tabs="parent"]') === parentElement) {
        this.toggleAccordion(accordion);
        document.activeElement.blur();
        return;
      }
      if (control.classList.contains('is-active') || parentElement.classList.contains('no-action')) {
        return;
      }
      var dataDelay = parentElement.dataset.delay ? parentElement.dataset.delay : 0;
      var dataHeight = parentElement.dataset.height;
      var contentElement = parentElement.querySelector('[data-tabs="content"]');
      var tabElements = this._returnScopeList(parentElement.querySelectorAll('[data-tabs="element"]'), parentElement);
      var activeControl = this._returnScopeChild(parentElement.querySelectorAll('[data-tabs="control"].is-active'), parentElement);
      var activeElement = this._returnScopeChild(parentElement.querySelectorAll('[data-tabs="element"].is-active'), parentElement);
      var currentHeight = contentElement.offsetHeight;
      var newHeight = tabElements[currentIndex].offsetHeight;
      parentElement.classList.add('no-action');
      document.activeElement.blur();
      if (activeControl) {
        activeControl.classList.remove('is-active');
      }
      if (activeElement) {
        activeElement.classList.remove('is-active');
      }
      if (currentHeight > newHeight) {
        setTimeout(function () {
          if (dataHeight !== 'max' && dataHeight !== 'unset') {
            contentElement.style.height = newHeight + 'px';
          }
          control.classList.add('is-active');
          tabElements[currentIndex].classList.add('is-active');
          parentElement.classList.remove('no-action');
        }, dataDelay);
      } else {
        if (dataHeight !== 'max' && dataHeight !== 'unset') {
          contentElement.style.height = newHeight + 'px';
        }
        setTimeout(function () {
          control.classList.add('is-active');
          tabElements[currentIndex].classList.add('is-active');
          parentElement.classList.remove('no-action');
        }, dataDelay);
      }
    }
  }]);
  return Tabs;
}();

},{}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initYoutubeVideo = void 0;
var container = document.querySelector('[data-video="about-video"]');
var cover = document.querySelector('[data-video="about-video"]').querySelector('picture');
var button = document.querySelector('[data-video="about-video"]').querySelector('[data-play-button="play-button"]');
var createVideo = function createVideo() {
  var video = document.createElement('iframe');
  video.setAttribute('src', 'https://www.youtube.com/embed/9TZXsZItgdw?autoplay=1');
  video.setAttribute('title', 'Бесплатные интерактивные онлайн-курсы');
  video.setAttribute('frameborder', '0');
  video.setAttribute('allow', 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share');
  video.setAttribute('allowfullscreen', '');
  video.classList.add('about__video-player');
  container.append(video);
};
var initYoutubeVideo = exports.initYoutubeVideo = function initYoutubeVideo() {
  if (container && cover && button) {
    button.addEventListener('click', function (event) {
      event.preventDefault();
      container.classList.remove('about__video--overlay');
      cover.style.display = 'none';
      button.style.display = 'none';
      var style = document.createElement('style');
      style.innerHTML = '.about__video::after { z-index: -1; }';
      document.head.appendChild(style);
      createVideo();
    });
  }
};

},{}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iosChecker = void 0;
var iosChecker = exports.iosChecker = function iosChecker() {
  return ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform)
  // iPad on iOS 13 detection
  || navigator.userAgent.includes('Mac') && 'ontouchend' in document;
};

},{}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iosVhFix = void 0;
var _iosChecker = require("./ios-checker");
var iosVhFix = exports.iosVhFix = function iosVhFix() {
  if (!(!!window.MSInputMethodContext && !!document.documentMode)) {
    if ((0, _iosChecker.iosChecker)()) {
      var vh = window.innerHeight * 0.01;
      document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      window.addEventListener('resize', function () {
        vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      });
    }
  }
};

},{"./ios-checker":8}]},{},[3])


//# sourceMappingURL=main.min.js.map
